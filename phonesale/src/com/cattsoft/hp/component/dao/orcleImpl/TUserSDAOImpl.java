package com.cattsoft.hp.component.dao.orcleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import org.apache.log4j.Logger;import com.cattsoft.hp.component.dao.ITUserSDAO;import com.cattsoft.hp.vo.TUserSVO;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO; /**   * 方法TUserSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TUserSDAOImpl implements ITUserSDAO{    private static Logger log = Logger.getLogger(TUserSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TUserSVO tUser=(TUserSVO) vo;    if (StringUtil.isBlank(tUser.getUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_USER(COMPANY_ID,REMARKS,USER_ADDR,USER_BIRTHDAY,USER_BY_NAME,USER_CELL,USER_CID,USER_EDU,USER_HOBBY,USER_ID,USER_IMID,USER_NAME,USER_OPEN_ID,USER_PIC_FLAG,USER_SEX,USER_STATUS)");sql.append(" VALUES (:companyId,:remarks,:userAddr,:userBirthday,:userByName,:userCell,:userCid,:userEdu,:userHobby,:userId,:userImid,:userName,:userOpenId,:userPicFlag,:userSex,:userStatus)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tUser.getCompanyId())) {      sql.setNullLong("companyId");     } else {    sql.setLong("companyId", tUser.getCompanyId());    }       if (StringUtil.isBlank(tUser.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tUser.getRemarks());    }       if (StringUtil.isBlank(tUser.getUserAddr())) {      sql.setNullString("userAddr");     } else {    sql.setString("userAddr", tUser.getUserAddr());    }    if (tUser.getUserBirthday() == null) {      sql.setNullDate("userBirthday");     } else {    sql.setTimestamp("userBirthday", tUser.getUserBirthday());    }       if (StringUtil.isBlank(tUser.getUserByName())) {      sql.setNullString("userByName");     } else {    sql.setString("userByName", tUser.getUserByName());    }       if (StringUtil.isBlank(tUser.getUserCell())) {      sql.setNullString("userCell");     } else {    sql.setString("userCell", tUser.getUserCell());    }       if (StringUtil.isBlank(tUser.getUserCid())) {      sql.setNullString("userCid");     } else {    sql.setString("userCid", tUser.getUserCid());    }       if (StringUtil.isBlank(tUser.getUserEdu())) {      sql.setNullString("userEdu");     } else {    sql.setString("userEdu", tUser.getUserEdu());    }       if (StringUtil.isBlank(tUser.getUserHobby())) {      sql.setNullString("userHobby");     } else {    sql.setString("userHobby", tUser.getUserHobby());    }       if (StringUtil.isBlank(tUser.getUserId())) {      sql.setNullLong("userId");     } else {    sql.setLong("userId", tUser.getUserId());    }       if (StringUtil.isBlank(tUser.getUserImid())) {      sql.setNullString("userImid");     } else {    sql.setString("userImid", tUser.getUserImid());    }       if (StringUtil.isBlank(tUser.getUserName())) {      sql.setNullString("userName");     } else {    sql.setString("userName", tUser.getUserName());    }       if (StringUtil.isBlank(tUser.getUserOpenId())) {      sql.setNullString("userOpenId");     } else {    sql.setString("userOpenId", tUser.getUserOpenId());    }       if (StringUtil.isBlank(tUser.getUserPicFlag())) {      sql.setNullString("userPicFlag");     } else {    sql.setString("userPicFlag", tUser.getUserPicFlag());    }       if (StringUtil.isBlank(tUser.getUserSex())) {      sql.setNullString("userSex");     } else {    sql.setString("userSex", tUser.getUserSex());    }       if (StringUtil.isBlank(tUser.getUserStatus())) {      sql.setNullString("userStatus");     } else {    sql.setString("userStatus", tUser.getUserStatus());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TUserSVO tUser=(TUserSVO) vo;    if (StringUtil.isBlank(tUser.getUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT COMPANY_ID,REMARKS,USER_ADDR,USER_BIRTHDAY,USER_BY_NAME,USER_CELL,USER_CID,USER_EDU,USER_HOBBY,USER_ID,USER_IMID,USER_NAME,USER_OPEN_ID,USER_PIC_FLAG,USER_SEX,USER_STATUS FROM T_USER WHERE 1=1  ");sql.append(" and USER_ID=:userId");sql.setLong("userId", tUser.getUserId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tUser =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tUser = new TUserSVO();           tUser.setCompanyId(rs.getString("COMPANY_ID"));           tUser.setRemarks(rs.getString("REMARKS"));           tUser.setUserAddr(rs.getString("USER_ADDR"));           tUser.setUserBirthday(rs.getTimestamp("USER_BIRTHDAY"));           tUser.setUserByName(rs.getString("USER_BY_NAME"));           tUser.setUserCell(rs.getString("USER_CELL"));           tUser.setUserCid(rs.getString("USER_CID"));           tUser.setUserEdu(rs.getString("USER_EDU"));           tUser.setUserHobby(rs.getString("USER_HOBBY"));           tUser.setUserId(rs.getString("USER_ID"));           tUser.setUserImid(rs.getString("USER_IMID"));           tUser.setUserName(rs.getString("USER_NAME"));           tUser.setUserOpenId(rs.getString("USER_OPEN_ID"));           tUser.setUserPicFlag(rs.getString("USER_PIC_FLAG"));           tUser.setUserSex(rs.getString("USER_SEX"));           tUser.setUserStatus(rs.getString("USER_STATUS"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tUser;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TUserSVO tUser=(TUserSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT COMPANY_ID,REMARKS,USER_ADDR,USER_BIRTHDAY,USER_BY_NAME,USER_CELL,USER_CID,USER_EDU,USER_HOBBY,USER_ID,USER_IMID,USER_NAME,USER_OPEN_ID,USER_PIC_FLAG,USER_SEX,USER_STATUS FROM T_USER WHERE 1=1 ");     try {if (tUser.getFlagCompanyId() == 1) {      if (StringUtil.isBlank(tUser.getCompanyId())) {             sql.append(" and COMPANY_ID is null ");          }      else{             sql.append(" and COMPANY_ID=:companyId");             sql.setLong("companyId", tUser.getCompanyId());          }   } if (tUser.getFlagRemarks() == 1) {      if (StringUtil.isBlank(tUser.getRemarks())) {             sql.append(" and REMARKS is null ");          }      else{             sql.append(" and REMARKS=:remarks");             sql.setString("remarks", tUser.getRemarks());          }   } if (tUser.getFlagUserAddr() == 1) {      if (StringUtil.isBlank(tUser.getUserAddr())) {             sql.append(" and USER_ADDR is null ");          }      else{             sql.append(" and USER_ADDR=:userAddr");             sql.setString("userAddr", tUser.getUserAddr());          }   } if (tUser.getFlagUserBirthday() == 1) {      if (tUser.getUserBirthday() == null) {             sql.append(" and USER_BIRTHDAY is null ");          }      else{             sql.append(" and USER_BIRTHDAY=:userBirthday");             sql.setTimestamp("userBirthday", tUser.getUserBirthday());          }   } if (tUser.getFlagUserByName() == 1) {      if (StringUtil.isBlank(tUser.getUserByName())) {             sql.append(" and USER_BY_NAME is null ");          }      else{             sql.append(" and USER_BY_NAME=:userByName");             sql.setString("userByName", tUser.getUserByName());          }   } if (tUser.getFlagUserCell() == 1) {      if (StringUtil.isBlank(tUser.getUserCell())) {             sql.append(" and USER_CELL is null ");          }      else{             sql.append(" and USER_CELL=:userCell");             sql.setString("userCell", tUser.getUserCell());          }   } if (tUser.getFlagUserCid() == 1) {      if (StringUtil.isBlank(tUser.getUserCid())) {             sql.append(" and USER_CID is null ");          }      else{             sql.append(" and USER_CID=:userCid");             sql.setString("userCid", tUser.getUserCid());          }   } if (tUser.getFlagUserEdu() == 1) {      if (StringUtil.isBlank(tUser.getUserEdu())) {             sql.append(" and USER_EDU is null ");          }      else{             sql.append(" and USER_EDU=:userEdu");             sql.setString("userEdu", tUser.getUserEdu());          }   } if (tUser.getFlagUserHobby() == 1) {      if (StringUtil.isBlank(tUser.getUserHobby())) {             sql.append(" and USER_HOBBY is null ");          }      else{             sql.append(" and USER_HOBBY=:userHobby");             sql.setString("userHobby", tUser.getUserHobby());          }   } if (tUser.getFlagUserId() == 1) {      if (StringUtil.isBlank(tUser.getUserId())) {             sql.append(" and USER_ID is null ");          }      else{             sql.append(" and USER_ID=:userId");             sql.setLong("userId", tUser.getUserId());          }   } if (tUser.getFlagUserImid() == 1) {      if (StringUtil.isBlank(tUser.getUserImid())) {             sql.append(" and USER_IMID is null ");          }      else{             sql.append(" and USER_IMID=:userImid");             sql.setString("userImid", tUser.getUserImid());          }   } if (tUser.getFlagUserName() == 1) {      if (StringUtil.isBlank(tUser.getUserName())) {             sql.append(" and USER_NAME is null ");          }      else{             sql.append(" and USER_NAME=:userName");             sql.setString("userName", tUser.getUserName());          }   } if (tUser.getFlagUserOpenId() == 1) {      if (StringUtil.isBlank(tUser.getUserOpenId())) {             sql.append(" and USER_OPEN_ID is null ");          }      else{             sql.append(" and USER_OPEN_ID=:userOpenId");             sql.setString("userOpenId", tUser.getUserOpenId());          }   } if (tUser.getFlagUserPicFlag() == 1) {      if (StringUtil.isBlank(tUser.getUserPicFlag())) {             sql.append(" and USER_PIC_FLAG is null ");          }      else{             sql.append(" and USER_PIC_FLAG=:userPicFlag");             sql.setString("userPicFlag", tUser.getUserPicFlag());          }   } if (tUser.getFlagUserSex() == 1) {      if (StringUtil.isBlank(tUser.getUserSex())) {             sql.append(" and USER_SEX is null ");          }      else{             sql.append(" and USER_SEX=:userSex");             sql.setString("userSex", tUser.getUserSex());          }   } if (tUser.getFlagUserStatus() == 1) {      if (StringUtil.isBlank(tUser.getUserStatus())) {             sql.append(" and USER_STATUS is null ");          }      else{             sql.append(" and USER_STATUS=:userStatus");             sql.setString("userStatus", tUser.getUserStatus());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tUser = new TUserSVO();           tUser.setCompanyId(rs.getString("COMPANY_ID"));           tUser.setRemarks(rs.getString("REMARKS"));           tUser.setUserAddr(rs.getString("USER_ADDR"));           tUser.setUserBirthday(rs.getTimestamp("USER_BIRTHDAY"));           tUser.setUserByName(rs.getString("USER_BY_NAME"));           tUser.setUserCell(rs.getString("USER_CELL"));           tUser.setUserCid(rs.getString("USER_CID"));           tUser.setUserEdu(rs.getString("USER_EDU"));           tUser.setUserHobby(rs.getString("USER_HOBBY"));           tUser.setUserId(rs.getString("USER_ID"));           tUser.setUserImid(rs.getString("USER_IMID"));           tUser.setUserName(rs.getString("USER_NAME"));           tUser.setUserOpenId(rs.getString("USER_OPEN_ID"));           tUser.setUserPicFlag(rs.getString("USER_PIC_FLAG"));           tUser.setUserSex(rs.getString("USER_SEX"));           tUser.setUserStatus(rs.getString("USER_STATUS"));               res.add(tUser);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TUserSVO tUser=(TUserSVO) vo;    if (StringUtil.isBlank(tUser.getUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_USER SET ");     try {if (tUser.getFlagCompanyId() == 1) {sql.append("COMPANY_ID=:companyId,");sql.setLong("companyId", tUser.getCompanyId()); } if (tUser.getFlagRemarks() == 1) {sql.append("REMARKS=:remarks,"); sql.setString("remarks", tUser.getRemarks()); } if (tUser.getFlagUserAddr() == 1) {sql.append("USER_ADDR=:userAddr,"); sql.setString("userAddr", tUser.getUserAddr()); } if (tUser.getFlagUserBirthday() == 1) {sql.append("USER_BIRTHDAY=:userBirthday,"); sql.setTimestamp("userBirthday", tUser.getUserBirthday()); } if (tUser.getFlagUserByName() == 1) {sql.append("USER_BY_NAME=:userByName,"); sql.setString("userByName", tUser.getUserByName()); } if (tUser.getFlagUserCell() == 1) {sql.append("USER_CELL=:userCell,"); sql.setString("userCell", tUser.getUserCell()); } if (tUser.getFlagUserCid() == 1) {sql.append("USER_CID=:userCid,"); sql.setString("userCid", tUser.getUserCid()); } if (tUser.getFlagUserEdu() == 1) {sql.append("USER_EDU=:userEdu,"); sql.setString("userEdu", tUser.getUserEdu()); } if (tUser.getFlagUserHobby() == 1) {sql.append("USER_HOBBY=:userHobby,"); sql.setString("userHobby", tUser.getUserHobby()); } if (tUser.getFlagUserImid() == 1) {sql.append("USER_IMID=:userImid,"); sql.setString("userImid", tUser.getUserImid()); } if (tUser.getFlagUserName() == 1) {sql.append("USER_NAME=:userName,"); sql.setString("userName", tUser.getUserName()); } if (tUser.getFlagUserOpenId() == 1) {sql.append("USER_OPEN_ID=:userOpenId,"); sql.setString("userOpenId", tUser.getUserOpenId()); } if (tUser.getFlagUserPicFlag() == 1) {sql.append("USER_PIC_FLAG=:userPicFlag,"); sql.setString("userPicFlag", tUser.getUserPicFlag()); } if (tUser.getFlagUserSex() == 1) {sql.append("USER_SEX=:userSex,"); sql.setString("userSex", tUser.getUserSex()); } if (tUser.getFlagUserStatus() == 1) {sql.append("USER_STATUS=:userStatus,"); sql.setString("userStatus", tUser.getUserStatus()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and USER_ID=:userId");sql.setLong("userId", tUser.getUserId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_USER(COMPANY_ID,REMARKS,USER_ADDR,USER_BIRTHDAY,USER_BY_NAME,USER_CELL,USER_CID,USER_EDU,USER_HOBBY,USER_ID,USER_IMID,USER_NAME,USER_OPEN_ID,USER_PIC_FLAG,USER_SEX,USER_STATUS)");sql.append(" VALUES (:companyId,:remarks,:userAddr,:userBirthday,:userByName,:userCell,:userCid,:userEdu,:userHobby,:userId,:userImid,:userName,:userOpenId,:userPicFlag,:userSex,:userStatus)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TUserSVO tUser=(TUserSVO) list.get(i);         if (tUser== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(tUser.getUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(tUser.getCompanyId())) {      sql.setNullLong("companyId");     } else {    sql.setLong("companyId", tUser.getCompanyId());    }       if (StringUtil.isBlank(tUser.getRemarks())) {      sql.setNullString("remarks");     } else {    sql.setString("remarks", tUser.getRemarks());    }       if (StringUtil.isBlank(tUser.getUserAddr())) {      sql.setNullString("userAddr");     } else {    sql.setString("userAddr", tUser.getUserAddr());    }    if (tUser.getUserBirthday() == null) {      sql.setNullDate("userBirthday");     } else {    sql.setTimestamp("userBirthday", tUser.getUserBirthday());    }       if (StringUtil.isBlank(tUser.getUserByName())) {      sql.setNullString("userByName");     } else {    sql.setString("userByName", tUser.getUserByName());    }       if (StringUtil.isBlank(tUser.getUserCell())) {      sql.setNullString("userCell");     } else {    sql.setString("userCell", tUser.getUserCell());    }       if (StringUtil.isBlank(tUser.getUserCid())) {      sql.setNullString("userCid");     } else {    sql.setString("userCid", tUser.getUserCid());    }       if (StringUtil.isBlank(tUser.getUserEdu())) {      sql.setNullString("userEdu");     } else {    sql.setString("userEdu", tUser.getUserEdu());    }       if (StringUtil.isBlank(tUser.getUserHobby())) {      sql.setNullString("userHobby");     } else {    sql.setString("userHobby", tUser.getUserHobby());    }       if (StringUtil.isBlank(tUser.getUserId())) {      sql.setNullLong("userId");     } else {    sql.setLong("userId", tUser.getUserId());    }       if (StringUtil.isBlank(tUser.getUserImid())) {      sql.setNullString("userImid");     } else {    sql.setString("userImid", tUser.getUserImid());    }       if (StringUtil.isBlank(tUser.getUserName())) {      sql.setNullString("userName");     } else {    sql.setString("userName", tUser.getUserName());    }       if (StringUtil.isBlank(tUser.getUserOpenId())) {      sql.setNullString("userOpenId");     } else {    sql.setString("userOpenId", tUser.getUserOpenId());    }       if (StringUtil.isBlank(tUser.getUserPicFlag())) {      sql.setNullString("userPicFlag");     } else {    sql.setString("userPicFlag", tUser.getUserPicFlag());    }       if (StringUtil.isBlank(tUser.getUserSex())) {      sql.setNullString("userSex");     } else {    sql.setString("userSex", tUser.getUserSex());    }       if (StringUtil.isBlank(tUser.getUserStatus())) {      sql.setNullString("userStatus");     } else {    sql.setString("userStatus", tUser.getUserStatus());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TUserSVO tUser=(TUserSVO) vo;    if (StringUtil.isBlank(tUser.getUserId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_USER WHERE 1=1  ");sql.append(" and USER_ID=:userId");sql.setLong("userId", tUser.getUserId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TUserSVO tUser=(TUserSVO) vo;       }}
